import axios from 'axios';
import * as dotenv from 'dotenv';
import { encodeFunctionData } from 'viem';
import abi from './abi';
dotenv.config();

const splurgeContract = '0xf1523fcd98490383d079f5822590629c154cfacf';

const encodeInput = () => {
  const splurgeOrderStruct = [
    '0x9c3c9283d3e44854697cd22d3faa240cfb032889', // inputTokenAddy
    '0xa0a6c157871a9f38253234bbfd2b8d79f9e9fcdc', // outputTokenAddy
    '0x8839278a75dc8249bc0c713a710aaebd0fee6750', // recipient
    BigInt(200000000000000000), // amount
    BigInt(6), // tranches
    BigInt(1730016559), // deadline
    BigInt(1), //salt
  ];

  const zeroExSwapStruct = [
    '0x9c3c9283d3e44854697cd22d3faa240cfb032889', // inputToken
    '0xa0a6c157871a9f38253234bbfd2b8d79f9e9fcdc', // outputToken
    BigInt(100000), // inputTokenAmount
    BigInt(98009870428), // minOutputTokenAmount
    [
      [
        8, // deploymentNonce, data
        '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009c3c9283d3e44854697cd22d3faa240cfb032889000000000000000000000000a0a6c157871a9f38253234bbfd2b8d79f9e9fcdc00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000016d1d7f05c000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c0586156400000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002b9c3c9283d3e44854697cd22d3faa240cfb032889002710a0a6c157871a9f38253234bbfd2b8d79f9e9fcdc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      ],
      [
        11, // deploymentNonce, data
        '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000009c3c9283d3e44854697cd22d3faa240cfb032889000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000',
      ],
    ],
  ];

  const signature =
    '0xff7ad0e43ac2a46d0a5fbc63ad7020bf64e4f13c7fadd915b21a5cbef24feff977c339c5db9b7de9e6ba35a404185a36ba2225289b43ba4fea8d92194cb21b381c';

  const data = encodeFunctionData({
    abi,
    functionName: 'verifyExecuteTrade',
    args: [splurgeOrderStruct, signature, zeroExSwapStruct],
  });
  return data;
};

const exectuteTrade = async () => {
  // assuming environment variables TENDERLY_USER, TENDERLY_PROJECT and TENDERLY_ACCESS_KEY are set
  // https://docs.tenderly.co/other/platform-access/how-to-find-the-project-slug-username-and-organization-name
  // https://docs.tenderly.co/other/platform-access/how-to-generate-api-access-tokens
  const { TENDERLY_USER, TENDERLY_PROJECT, TENDERLY_ACCESS_KEY } = process.env;

  const resp = await axios.post(
    `https://api.tenderly.co/api/v1/account/${TENDERLY_USER}/project/${TENDERLY_PROJECT}/simulate`,
    {
      save: true,
      save_if_fails: true,
      simulation_type: 'quick',
      network_id: '80001',
      from: '0x8839278a75dc8249bc0c713a710aaebd0fee6750',
      to: splurgeContract,
      input: encodeInput(),
      block_number: 42322051, //remove in future
      gas: 8000000,
      gas_price: 0,
      value: 0,
    },
    {
      headers: {
        'X-Access-Key': TENDERLY_ACCESS_KEY as string,
      },
    },
  );

  const transaction = resp.data.transaction;
  const logs = resp.data.transaction.transaction_info.logs;
  if (logs)
    console.log(
      `Successful transaction: hash: ${transaction.hash} block number: ${transaction.block_number}`,
    );
  else {
    console.log(`Transaction failed`);
  }
};

exectuteTrade();
