import {
  Web3Function,
  Web3FunctionContext,
} from '@gelatonetwork/web3-functions-sdk';
import { Contract } from '@ethersproject/contracts';
import axios from 'axios';
import { createClient } from '@supabase/supabase-js';

const Splurge_ABI = [
  'function prepareVerifyTrade((address,address,address,uint256,uint8,uint256,uint8),bytes memory,bytes memory) public',
];
const tokenPair = {
  input: '0xbcdCB26fFec1bE5991FA4b5aF5B2BbC878965Db1',
  output: '0xFA75399b5ce8C0299B0434E0D1bcFDFd8fF8a755',
};

const supabaseUrl = 'https://gmupexxqnzrrzozcovjp.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdtdXBleHhxbnpycnpvemNvdmpwIiwicm9sZSI6ImFub24iLCJpYXQiOjE2OTkyMTkxMjcsImV4cCI6MjAxNDc5NTEyN30.xetdfXSWa5-VMERkCTAnLEhrD2sb1anc3hast3jij_g';

const supabase = createClient(supabaseUrl, supabaseKey);

interface OrderDetails {
  inputTokenAddy: string; 
  outputTokenAddy: string; 
  recipient: string; 
  orderType: string; 
  amount: string; 
  tranches: string; 
  percentChange: string; 
  priceAvg: string; 
  deadline: string; 
  salt: string; 
}

// Create order with the following data 
// inputTokenAddy,
// outputTokenAddy,
// recipient,
// orderType, 
// amount,
// tranches,
// percentChange, 
// priceAvg, 
// deadline,
// salt

interface TradeMapping {
  signature: string;
  orderDetails: OrderDetails;
}

async function fetchReadyTrades() {
  const { data, error } = await supabase
    .from('Trades') 
    .select('*')    
    .eq('ready', true); 

  if (error) {
    console.error('Error fetching data:', error);
    return;
  }
  // Map through the data to parse the 'order' JSONB and create the mapping
  const tradeMappings: TradeMapping[] = data.map(trade => ({
    signature: trade.signature,
    orderDetails: JSON.parse(trade.order) as OrderDetails 
  }));

  console.log('Trade Mappings:', tradeMappings);
  return tradeMappings;
}


async function fetchPrice(
  pair: {
    input: string;
    output: string;
  },
  apiKey: string,
): Promise<number> {
  const url = `https://mumbai.api.0x.org/swap/v1/quote?buyToken=${pair.output}&sellToken=${pair.input}&sellAmount=100000`;
  const headers = { '0x-api-key': apiKey };
  const response = await axios.get(url, { headers });
  return parseFloat(response.data.price);
}

Web3Function.onRun(async (context: Web3FunctionContext) => {
  const { userArgs, gelatoArgs, secrets, multiChainProvider } = context;
  const provider = multiChainProvider.default();
  const splurgeAddy = '0x414ab760a79ba57df175a7ce49e78fbb4d12b963';
  const splurgeContract = new Contract(
    String(splurgeAddy),
    Splurge_ABI,
    provider,
  );

  let apiKey = await secrets.get('OX_API_URL');
  if (apiKey) {
    let price = await fetchPrice(tokenPair, apiKey);
    if (price < 0.98) {
      const order = [
        '0x9c3c9283d3e44854697cd22d3faa240cfb032889', // inputTokenAddy
        '0xa0a6c157871a9f38253234bbfd2b8d79f9e9fcdc', // outputTokenAddy
        '0x8839278a75dc8249bc0c713a710aaebd0fee6750', // recipient
        '100000000000000000', // amount
        6, // tranches
        '1730016559', // deadline
        1, // salt
      ];
      const sig =
        '0x8dc8d0ba773a15c6b279e902c10028eb4b5acf829b70d57366331d1599c67b2f184f17211871faecb61a3725cad515580de5d0c73434364ef9424a0e4eadc1381b';

      const swapCallData =
        '0x415565b00000000000000000000000009c3c9283d3e44854697cd22d3faa240cfb032889000000000000000000000000a0a6c157871a9f38253234bbfd2b8d79f9e9fcdc00000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000016d1d7f05c00000000000000000000000000000000000000000000000000000000000000ac3c9283d3e44854697cd22d3faa240cfb032889000000000000000000000000a0a6c157871a9f38253234bbfd2b8d79f9e9fcdc00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000012556e697377617056330000000000000000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000016d1d7f05c000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c0586156400000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002b9c3c9283d3e44854697cd22d3faa240cfb032889002710a0a6c157871a9f38253234bbfd2b8d79f9e9fcdc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000009c3c9283d3e44854697cd22d3faa240cfb032889000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000001000000000000000000000000000000000000011000000000000000000000000000000003395e8e1b4e8429c8b3e871b4e1cdb5c';
      return {
        canExec: true,
        callData: [
          {
            to: splurgeAddy,
            data: splurgeContract.interface.encodeFunctionData(
              'prepareVerifyTrade',
              [order, sig, swapCallData],
            ),
          },
        ],
      };
    }
    return {
      canExec: false,
      message: `not yet, the price is ${price}`,
    };
  }
  return {
    canExec: false,
    message: `api key not provided`,
  };
});
